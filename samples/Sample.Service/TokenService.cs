using System.Threading.Tasks;
using Rapidity.Http;
using Rapidity.Http.Attributes;
using Rapidity.Http.Extensions;
using Sample.Service;

namespace AutoGenerated.Service
{
    /// <summary>
    /// 
    /// </summary>
    public class TokenService : ITokenService
    {
        private readonly IRequestDescriptionBuilder _builder;
        private readonly IHttpClientWrapper _client;

        public TokenService(IRequestDescriptionBuilder builder, IHttpClientWrapper client)
        {
            _builder = builder;
            _client = client;
        }

        [Get("/cgi-bin/token")]
        public async Task<AccessToken> GetToken(string appid, string secret, string grantType = "client_credential")
        {
            var request = _builder.Build(typeof(ITokenService), appid, secret, grantType);
            return await _client.SendAsync<AccessToken>(request);
        }

        [Get("/cgi-bin/getcallbackip?access_token={token}")]
        public async Task<ResponseWrapper<IpList>> GetIpListAsync(string token)
        {
            var request = _builder.Build(typeof(ITokenService), token);
            return await _client.SendAndWrapAsync<IpList>(request);
        }

        [Post("/cgi-bin/message/template/send?access_token={token}")]
        [Header("header:12121212")]
        public void SendTemplateMsg(string token, MessageTemplate template)
        {
            var request = _builder.Build(typeof(ITokenService), token, template);
            _client.SendAsync<AccessToken>(request).GetAwaiter().GetResult();
        }
    }
}