using System;
using Rapidity.Http.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using Rapidity.Http;
using Rapidity.Http.Extensions;

namespace Sample.Service
{
    /// <summary>
    /// 
    /// </summary>
    [HttpService]
    public interface ITestService
    {
        Task<string> GetAsync<TInput>([Query]IList<TInput> input, [Header]string token) where TInput : MessageTemplate, new();
    }

    [HttpService]
    public interface IGenericService<in TData, TResult>
        where TData : ICollection<MessageTemplate>, new()
        where TResult : class, ITestService
    {
        [Get("/send/{data}")]
        [Header("afee:jfkejlfe")]
        [CacheAttribute(true, 10000)]
        Task Send(IEnumerable<TData> list, params string[] data);
    }
}


namespace Dynamic2514c5a1
{
    using Sample.Service;

    [HttpService(Service = "wechat", ContentType = "application/json", Encoding = "utf-8")]
    [Cache(true)]
    [Header("heefe:afefef")]
    public class AutoGeneratedTokenService : Sample.Service.ITokenService
    {
        private readonly IRequestDescriptionBuilder _builder;
        private readonly IHttpClientWrapper _client;

        public AutoGeneratedTokenService(IRequestDescriptionBuilder builder, IHttpClientWrapper client)
        {
            _builder = builder;
            _client = client;
        }


        // GetToken
        [Get("/cgi-bin/token")]
        public async System.Threading.Tasks.Task<Sample.Service.AccessToken> GetToken([Query]System.String appid, [Query]System.String secret, [Query(Name = "grant_type")]System.String grantType = "client_credential")
        {
            var request = _builder.Build(this.GetType(), appid, secret, grantType);
            return await _client.SendAsync<Sample.Service.AccessToken>(request, CancellationToken.None);
        }

        // GetIpListAsync
        [Get("/cgi-bin/getcallbackip?access_token={token}")]
        public async System.Threading.Tasks.Task<Rapidity.Http.ResponseWrapper<Sample.Service.IpList>> GetIpListAsync([Query]System.String token)
        {
            var request = _builder.Build(this.GetType(), token);
            return await _client.SendAndWrapAsync<Sample.Service.IpList>(request, CancellationToken.None);
        }

        // SendTemplateMsg
        [Post("/cgi-bin/message/template/send?access_token={token}")]
        [Header("header:12121212")]
        public void SendTemplateMsg(System.String token, [Body(CanNull = false)]Sample.Service.MessageTemplate template)
        {
            var request = _builder.Build(this.GetType(), token, template);
            _client.SendAndWrapAsync(request, CancellationToken.None).GetAwaiter().GetResult();
        }
    }
}
